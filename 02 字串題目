# 練習-02 使用文字

## 1. 答案卡-計算總分

#### (1) 說明

``` java
(1) 設定一個字串變數s1, 長度為20, 內容存放[學生的答案].

(2) 設定一個字串變數s2, 長度為20, 內容存放[標準答案].
    假設s2的內容為 "ABBCDCDAABDBCDCABACA"

(3) 請比對[學生的答案]與[標準答案], 答對1題得5分, 印出學生的得分.
```

#### (2) 測試
``` java
註:
同學設定不同的變數值後執行程式, 即可檢查自己的計算與參考答案是否相同?

(1) s1 = "ABBBDCDDACDCCDCDBACC"
    ==> 70分   

(2) s1 = "CBBDDCDBABDBCDCCCACA"
    ==> 75分

(3) s1 = "ABBCDCDABBDBCDCACACA"
    ==> 90分  

(4) s1 = "CBBCAADAABBBCDCDDACB"
    ==> 65分    

(5) s1 = "CCCCACDEAACDCDCCDACC"
    ==> 45分
```


## 2. 檢查學號

#### (1) 說明

``` java
(1) 設定一個字串變數s, 內容存放[學號].

(2) 符合以下所有條件印出true, 違反任何一項均印false:
    [1] 長度為8;
    [2] 前3碼為'106', '107', '108'其中之一;
    [3] 第4碼為'4'或'5'其中之一;
    [4] 第5碼為'6'.    
```

#### (2) 測試
``` java
註:
同學設定不同的變數值後執行程式, 即可檢查自己的計算與參考答案是否相同?

(1) s = "10656001"
    ==> true

(2) s = "1075601"
    ==> false
    
(3) s = "10846030"
    ==> true
    
(4) s = "10656045"
    ==> true
    
(5) s = "10736015"
    ==> false    
    
(6) s = "10845055"
    ==> false      
```


## 3. 字碼轉換

#### (1) 說明

``` java
(1) [文字碼]的內容是由'00', '01', '10', '11'等4種編號組合而成, 
    [文字序]的內容則是由[文字碼]的內容每2個一組依序轉碼的結果, 其中:
    
    '00' -> 'A'
    '01' -> 'B'
    '10' -> 'C'
    '11' -> 'D'
          
(2) 已知一個[文字碼], 請轉成[文字序]並顯示出來.
``` 

#### (2) 測試
``` java
(1) "00011011"
    ==> "ABCD"

(2) "11100100"
    ==> "DCBA"

(3) "0000010110101111"
    ==> "AABBCCDD"

(4) "1111101001010000"
    ==> "DDCCBBAA"

(5) "00"
    ==> "A"
``` 


## 4. 非遞減字串-判斷是否

#### (1) 說明

``` java
(1) 假設一個字串的內容都是由"0"~"9"組成, 而且它的內容至少有2個字.

(2) 如果有一個字串, 它除了第1個字外, 其他的每個字都比前面的字或更大或是相同, 那麼它就是"非遞減字串".
          
(3) 測試以下資料, 如果"非遞減字串"請印出true, 否則印出false.
``` 

#### (2) 測試
``` java
(1) "1112223334444555566667777"
    ==> true
    
(2) "3337777899922222222222222222"
    ==> false
    
(3) "3334555566777788999999"
    ==> true
    
(4) "11133336666777788881111"
    ==> false
    
(5) "1111222111111222222777777888888899999"
    ==> false
    
(6) "22223333444499999999"
    ==> true
``` 

## 5. 非遞減字串-最長的非遞減子字串

#### (1) 說明

``` java
(1) 假設一個字串的內容都是由"0"~"9"組成, 而且它的內容至少有2個字.

(2) 如果有一個字串, 它除了第1個字外, 其他的每個字都比前面的字或更大或是相同, 那麼它就是"非遞減字串".
          
(3) 請回傳字串中包含的[最長的非遞減字串]的長度.
          
    例如: [3-1] "112233' ==> 6
                (註:'112233')
                
         [3-2] "44113322" ==> 4
                (註:'1133')
``` 

#### (2) 測試
``` java
(1) "1112223334444555566667777"
    ==> 25
    
(2) "3337777899922222222222222222"
    ==> 17
    
(3) "3334555566777788999999"
    ==> 22
    
(4) "11133336666777788881111"
    ==> 19
    
(5) "1111222111111222222777777888888899999"
    ==> 30
    
(6) "22223333444499999999"
    ==> 20
``` 



## 6. 勇士們

#### (1) 說明

``` java
(1) 有一個任務派出52名勇士, 他們分為'A'~'Z'編號的26個小隊, 每隊有2人.
    因此, 一開始的隊員有2個'A', 2個'B', ...及2個'Z'.
    
(2) 現給一個字串, 表示為"生還勇士".

(3) 請列出小隊2人全部陣亡的隊名(依字母由小到大順序).
``` 

#### (2) 測試
``` java
(1) "KDIEWTBVXGMNZCSQASFRTYUPOMDWQ"
    ==> "HJL"
    
(2) "POILMVCJDHRRYEUWQAZXNSBFHTT"
    ==> "GK"
    
(3) "ABCDEFGHIJKLMN"
    ==> "OPQRSTUVWXYZ"
    
(4) "OEIPWOIQURJDFDJXUSYQTWRECMVLP"
    ==> "ABGHKNZ"
    
(5) "AEIROTPEPNJHYKXMDDIKWUURQAQZXCVBF"
    ==> "GLS"
``` 


## 7. 我們與惡的距離

#### (1) 說明

``` java
(1) 有一個字串, 其中只有"我"和"惡"2種內容, 長度最多100個字, 至少1個字.

(2) 找出字串中, 每個字與"惡"的最近距離.
    註: [2-1] 如果是"惡", 它的距離是0; 它旁邊的鄰居("我")是1, 接著("我")是2, 依此類推.
        [2-2] 一個字串可能有多個"惡", 並且至少有一個"惡".
        [2-3] 請以list或其他可識別的型態, 表示字串中每個字與惡的距離.
 
        例如:  '我惡我我我惡'
          ==>  [1, 0, 1, 2, 1, 0]
``` 

#### (2) 測試
``` java
(1) "我我我我我我我我我我我我我我我我我我我惡"
    ==> [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

(2) "惡我我我我我我我我我我我我我我我我"
    ==> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
    
(3) "我惡我我我惡"
    ==> [1, 0, 1, 2, 1, 0]
    
(4) "我我我惡我我我我我我惡我我我我我我惡我我我我"
    ==> [3, 2, 1, 0, 1, 2, 3, 3, 2, 1, 0, 1, 2, 3, 3, 2, 1, 0, 1, 2, 3, 4]
    
(5) "惡我我我我我我我惡我我我我我我我我惡我我我我我我我惡"
    ==> [0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0]
``` 



## 8. 四位數字檢查

#### (1) 說明

``` java
(1) 待檢查的字串, 應該符合以下條件:
          
    [1-1] 長度為4;
    [1-2] 內容只有數字;
    [1-3] 內容不重覆.
    
(2) 如果符合印出true, 否則傳回false.
``` 

#### (2) 測試
``` java
(1) "3214"
    ==> true

(2) "3.14"
    ==> false
    
(3) "542"
    ==> false
    
(4) "9887"
    ==> false
    
(5) "63901"
    ==> false
    
(6) "3968"
    ==> true   
    
(7) "592A"
    ==> false
``` 


## 9. 猜數字

#### (1) 說明

``` java
(1) 假設正確答案是"1234".

(2) 假設猜測數字是一個4位數數字, 且內容均不重覆(不必檢查是否符合).

(3) 如果猜測數字中的某位數, 出現在正確答案中, 且與正確答案出現的位置相同, 得到1A.

(4) 如果猜測數字中的某位數, 出現在正確答案中, 且與正確答案出現的位置不相同, 得到1B.
          
(5) 印出猜測數字得到的A及B.
``` 

#### (2) 測試
``` java
(1) "3214"
    ==> "2A2B"  
    
(2) "1483"
    ==> "1A2B"  
    
(3) "6980"
    ==> "0A0B"  
    
(4) "1539"
    ==> "2A0B"  
    
(5) "9647"
    ==> "0A1B"  
    
(6) "3961"
    ==> "0A2B"  
    
(7) "4398"
    ==> "0A2B"      
``` 


## 10. 檢查內容

#### (1) 說明

``` java
(1) 設定一個字串變數s.

(2) 符合以下所有條件印出true, 違反任何一項均印false:
    [1] 長度為大於1, 而且是奇數.
    [2] 第1碼是'A', 'B', 'K'(大寫)其中之一.
    [3] 最後1碼是數字.
    [4] 中間都是'*'.    
```

#### (2) 測試
``` java
註:
設定不同的變數值後執行程式, 即可檢查自己的計算與參考答案是否相同?

(1) s = "A*******1"
    ==> true

(2) s = "a***a"
    ==> false
    
(3) s = "K+++1"
    ==> false
    
(4) s = "B*****9"
    ==> true
    
(5) s = "C*****9"
    ==> false    
    
(6) s = "K***1"
    ==> true      
```



## 11. 檢查內容

#### (1) 說明

``` java
(1) 設定一個字串變數s.

(2) 符合以下所有條件印出true, 違反任何一項均印false:
    [1] [左括號的數量]等於[右括號的數量](也可以兩者都沒有);
    [2] 每一個[左括號]的右邊, 都有一個與自己配對的[右括號]. 
```

#### (2) 測試
``` java
註:
設定不同的變數值後執行程式, 即可檢查自己的計算與參考答案是否相同?

(1) s = "(123456789)"
    ==> true

(2) s = "123(456)789"
    ==> true
    
(3) s = "12(34(5678))9"
    ==> true
    
(4) s = "12)34567(89"
    ==> false
    
(5) s = "12345(6789"
    ==> false    
    
(6) s = "12345)6789"
    ==> false      
```

